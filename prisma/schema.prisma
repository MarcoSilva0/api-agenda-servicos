// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ThemePreference {
  SYSTEM
  LIGHT
  DARK
}

enum UserRole {
  OWNER
  ADMIN
  EMPLOYEE
}

model ActivityBranch {
  id          String                   @id @default(uuid())
  name        String
  description String?
  companies   Company[]
  services    DefaultActivityService[]
  Service     Service[]
}

model Company {
  id                  String   @id @default(uuid())
  name                String
  email               String   @unique
  phone               String
  address             String
  logoUrl             String? // opcional
  activityBranchId    String
  customShareTemplate String? // opcional
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  activityBranch ActivityBranch @relation(fields: [activityBranchId], references: [id])
  users          User[]
  employees      Employee[]
  services       Service[]
  clients        Client[]
  appointments   Appointment[]
  attendances    Attendance[]
}

model User {
  id                   String          @id @default(uuid())
  companyId            String
  name                 String
  email                String          @unique
  passwordHash         String
  phone                String?
  biometricAuthEnabled Boolean         @default(false)
  emailConfirmed       Boolean         @default(false)
  firstAccessCompleted Boolean         @default(false)
  role                 UserRole
  themePreference      ThemePreference
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  company                Company                 @relation(fields: [companyId], references: [id])
  passwordRecoveryTokens PasswordRecoveryToken[]
}

model Service {
  id                   String   @id @default(uuid())
  companyId            String
  name                 String
  description          String
  isFavorite           Boolean  @default(false)
  isFromActivityBranch Boolean  @default(false)
  activityBranchId     String? // rastrear origem
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  company             Company                     @relation(fields: [companyId], references: [id])
  activityBranch      ActivityBranch?             @relation(fields: [activityBranchId], references: [id])
  employeePreferences EmployeeServicePreference[]
  appointments        Appointment[]
  attendanceServices  AttendanceService[]
  attendanceEmployees AttendanceEmployee[]
}

model Employee {
  id        String   @id @default(uuid())
  companyId String
  name      String
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company             Company                     @relation(fields: [companyId], references: [id])
  servicePreferences  EmployeeServicePreference[]
  appointments        Appointment[]
  attendanceEmployees AttendanceEmployee[]
}

model EmployeeServicePreference {
  id         String   @id @default(uuid())
  employeeId String
  serviceId  String
  createdAt  DateTime @default(now())

  employee Employee @relation(fields: [employeeId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])
}

model Client {
  id        String   @id @default(uuid())
  companyId String
  name      String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company      Company       @relation(fields: [companyId], references: [id])
  appointments Appointment[]
  attendances  Attendance[]
}

model Appointment {
  id              String   @id @default(uuid())
  companyId       String
  clientId        String
  serviceId       String
  employeeId      String? // opcional
  appointmentDate DateTime
  appointmentTime DateTime
  status          String // scheduled/completed/cancelled
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  company    Company     @relation(fields: [companyId], references: [id])
  client     Client      @relation(fields: [clientId], references: [id])
  service    Service     @relation(fields: [serviceId], references: [id])
  employee   Employee?   @relation(fields: [employeeId], references: [id])
  attendance Attendance?
}

model Attendance {
  id             String    @id @default(uuid())
  appointmentId  String    @unique
  companyId      String
  clientId       String
  attendanceDate DateTime
  attendanceTime DateTime
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  appointment Appointment          @relation(fields: [appointmentId], references: [id])
  company     Company              @relation(fields: [companyId], references: [id])
  client      Client               @relation(fields: [clientId], references: [id])
  services    AttendanceService[]
  employees   AttendanceEmployee[]
}

model AttendanceService {
  id           String   @id @default(uuid())
  attendanceId String
  serviceId    String
  createdAt    DateTime @default(now())

  attendance Attendance @relation(fields: [attendanceId], references: [id])
  service    Service    @relation(fields: [serviceId], references: [id])
}

model AttendanceEmployee {
  id           String   @id @default(uuid())
  attendanceId String
  employeeId   String
  serviceId    String
  createdAt    DateTime @default(now())

  attendance Attendance @relation(fields: [attendanceId], references: [id])
  employee   Employee   @relation(fields: [employeeId], references: [id])
  service    Service    @relation(fields: [serviceId], references: [id])
}

model PasswordRecoveryToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model DefaultActivityService {
  id                String   @id @default(uuid())
  activityBranchId  String
  name              String
  description       String
  isFavoriteDefault Boolean  @default(false)
  createdAt         DateTime @default(now())

  activityBranch ActivityBranch @relation(fields: [activityBranchId], references: [id])
}
